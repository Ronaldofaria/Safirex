@model Safirex.Models.ClassificacaoEstrutura.Secretaria

@{
    ViewBag.Title = "Cadastro - Inclusão de Secretaria";
}

<h4>@ViewBag.Title</h4>
<hr />

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.GovernoId, "GovernoId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-xs-3 input-group">
                <span class="input-group-addon"></span>
                @Html.DropDownList("GovernoId", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.GovernoId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Sigla, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 input-group">
                <span class="input-group-addon"></span>
                @Html.EditorFor(model => model.Sigla, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Sigla, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Nome, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 input-group">
                <span class="input-group-addon"></span>
                @Html.EditorFor(model => model.Nome, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Nome, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.CNPJ, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 input-group">
                <span class="input-group-addon"></span>
                @Html.EditorFor(model => model.CNPJ, new { htmlAttributes = new { @class = "form-control", @onblur = "CallChangefunc()" } })
                @Html.ValidationMessageFor(model => model.CNPJ, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Endereco, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 input-group">
                <span class="input-group-addon"></span>
                @Html.EditorFor(model => model.Endereco, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Endereco, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Cidade, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 input-group">
                <span class="input-group-addon"></span>
                @Html.EditorFor(model => model.Cidade, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Cidade, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Bairro, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 input-group">
                <span class="input-group-addon"></span>
                @Html.EditorFor(model => model.Bairro, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Bairro, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Uf, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 input-group">
                <span class="input-group-addon"></span>
                @Html.EditorFor(model => model.Uf, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Uf, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Cep, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10 input-group">
                <span class="input-group-addon"></span>
                @Html.EditorFor(model => model.Cep, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Cep, "", new { @class = "text-danger" })
            </div>
        </div>

        <hr />
        <div class="form-group">
            <div class="col-md-offset-2">
                <button formaction="@Url.Action("Create", "Secretarias")" id="salvar" type="submit" data-toggle="tooltip" data-placement="bottom" title='Salva a Inclusão do registro e retorna.' onclick="return CallChangefunc()" class="btn btn-success-color btn-lg glyphicon glyphicon-ok"></button>
                <button formaction="@Url.Action("Index", "Secretarias")" type="submit" data-toggle="tooltip" data-placement="bottom" title='Cancela a inclusão do registro e retorna.' class="btn btn-warning btn-lg glyphicon glyphicon-remove"></button>
            </div>
        </div>
    </div>
}

@section Scripts {

    <script type="text/javascript">

        jQuery(function ($) {
            $("#DataAbertura").mask("99/99/9999", { placeholder: "mm/dd/yyyy" });
            $("#Cnpj").mask("99.999.999/9999-99", { placeholder: "99.999.999/9999-99" });
            $("#Uf").mask("E00/999.99999/9999", { placeholder: "E08/999.99999/9999" });
            $("#Cep").mask("99999-999", { placeholder: "99999-999" });
            $("#ValorBloqueio").mask("999.999.999.999,99", { reverse: true });
            $('#Sigla').mask('SSS-0000', {
                'translation': {
                    S: { pattern: /[A-Za-z]/ },
                    0: { pattern: /[0-9]/ }
                }
                , onKeyPress: function (value, event) {
                    event.currentTarget.value = value.toUpperCase();
                }
            });
        });

        function CallChangefunc() {
            var cnpj = document.getElementById("CNPJ").value;

            // Valida
            var valida = valida_cnpj(cnpj);
            // Testa a validação
            if (valida) {
                alert("CNPJ Valido!");
                return true;
            } else {
                alert("CNPJ Invalido!");
                return false;
            }

        }

        function valida_cnpj(str) {
            str = str.replace('.', '');
            str = str.replace('.', '');
            str = str.replace('.', '');
            str = str.replace('-', '');
            str = str.replace('/', '');
            cnpj = str;
            var numeros, digitos, soma, i, resultado, pos, tamanho, digitos_iguais;
            digitos_iguais = 1;
            if (cnpj.length < 14 && cnpj.length < 15)
                return false;
            for (i = 0; i < cnpj.length - 1; i++)
                if (cnpj.charAt(i) != cnpj.charAt(i + 1)) {
                    digitos_iguais = 0;
                    break;
                }
            if (!digitos_iguais) {
                tamanho = cnpj.length - 2
                numeros = cnpj.substring(0, tamanho);
                digitos = cnpj.substring(tamanho);
                soma = 0;
                pos = tamanho - 7;
                for (i = tamanho; i >= 1; i--) {
                    soma += numeros.charAt(tamanho - i) * pos--;
                    if (pos < 2)
                        pos = 9;
                }
                resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;
                if (resultado != digitos.charAt(0))
                    return false;
                tamanho = tamanho + 1;
                numeros = cnpj.substring(0, tamanho);
                soma = 0;
                pos = tamanho - 7;
                for (i = tamanho; i >= 1; i--) {
                    soma += numeros.charAt(tamanho - i) * pos--;
                    if (pos < 2)
                        pos = 9;
                }
                resultado = soma % 11 < 2 ? 0 : 11 - soma % 11;
                if (resultado != digitos.charAt(1))
                    return false;
                return true;
            }
            else
                return false;
        }

        function Valida_Cpf(strCPF) {
            var Soma;
            var Resto;
            Soma = 0;
            if (strCPF == "00000000000") return false;

            for (i = 1; i <= 9; i++) Soma = Soma + parseInt(strCPF.substring(i - 1, i)) * (11 - i);
            Resto = (Soma * 10) % 11;

            if ((Resto == 10) || (Resto == 11)) Resto = 0;
            if (Resto != parseInt(strCPF.substring(9, 10))) return false;

            Soma = 0;
            for (i = 1; i <= 10; i++) Soma = Soma + parseInt(strCPF.substring(i - 1, i)) * (12 - i);
            Resto = (Soma * 10) % 11;

            if ((Resto == 10) || (Resto == 11)) Resto = 0;
            if (Resto != parseInt(strCPF.substring(10, 11))) return false;
            return true;
        }
    </script>


}